{"version":3,"sources":["logo.svg","version.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["appVersion","App","fetch","window","location","pathname","then","response","ok","status","searchParams","URLSearchParams","search","set","Date","getTime","toString","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wKAAe,G,KAAA,IAA0B,kCCA9BA,G,KAAa,S,OCyDTC,MAzBf,WAGE,OAbEC,MAAM,GAAD,OAAIC,OAAOC,SAASC,SAApB,qBAAyCL,EAAzC,SACAM,MAAK,SAAAC,GACF,IAAKA,EAASC,IAA0B,MAApBD,EAASE,OAAgB,CACzC,IAAMC,EAAe,IAAIC,gBAAgBR,OAAOC,SAASQ,QACzDF,EAAaG,IAAI,IAAjB,WAAyB,IAAIC,MAAOC,YACpCZ,OAAOC,SAASQ,OAASF,EAAaM,eASlD,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,+CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,yBASA,4BAAIvB,UCrCGwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.d7cc2058.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export let appVersion = \"0.5.1\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {appVersion} from \"./version\";\n\n// function renewTimestampIfLongerThanSecond() {\n//     const now = Date.now();\n//     const searchParams = new URLSearchParams(window.location.search);\n//     const tString = searchParams.get(\"t\");\n//     const tValue = tString !== null ? parseInt(tString) : now - 2000;\n//\n//     if (now - tValue > 1000) {\n//         searchParams.set(\"t\", `${new Date().getTime()}`);\n//         window.location.search = searchParams.toString();\n//     }\n// }\n\nfunction goToTimestampedUrlIfOutdated() {\n    if (appVersion === \"#dev_version#\") {\n        return;\n    }\n\n    fetch(`${window.location.pathname}/versions/${appVersion}.txt`)\n        .then(response => {\n            if (!response.ok && response.status === 404) {\n                const searchParams = new URLSearchParams(window.location.search);\n                searchParams.set(\"t\", `${new Date().getTime()}`);\n                window.location.search = searchParams.toString();\n            }\n        });\n}\n\nfunction App() {\n    goToTimestampedUrlIfOutdated();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n\n        <p>{appVersion}</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}